

字符串长度(必须是length)：
    let {length} = '字符串.';
    console.log(length); //4

解构字符串：
    let [a,b,c] = "qwe";
    console.log(a,b,c);//q w e 

解构函数(此处传入一个数组)：
    var arr = [1,2];
    function test([a,b]){
        console.log(a,b);
    }
    test(arr);  //1 2

解构对象(数组是按下标,对象是按键去解析)：
    var obj = {b:4,a:3};
    function test({a,b}){
        console.log(a,b);
    }
    test(obj);  //3 4

解构对象(设置对象的默认值)：
    var obj = {b:4};
    function test({a=9,b}){
        console.log(a,b);
    }
    test(obj);  //9 4

ES6新增的几个方法：
(1)查看字符串中包含某个值的方法发生改变：
   console.log("gk".indexOf("g") !== -1); //true
   console.log("gk".includes("g")); //true
(2)检查以什么开头的方法：
   console.log("gk".startsWith("g")); //true
   console.log("gk".startsWith("k")); //false
(3)检查以什么结尾的方法：
    console.log("gk".endsWith("g")); //false
    console.log("gk".endsWith("k")); //true
(4)重复多少次：
    console.log("gk ".repeat(3));//gk gk gk 

ES6模板字符串(${}去解析变量，模板里面还可以套模板，例如html3)：
    let title = "好好学习";
    let content ="天天向上";
    var html1 = '<div>'
              + '<span>'+ title +'</span>'      
              +'</div>'; 
    let html2 =`
                <div>
                     <span>${title}</span>   
                </div>    
                `;
    let html3 =`
                <div>
                     <span>${title + `
                            <span>${1234}${content}</span>
                        `}</span>   
                </div>    
                `;

    console.log(html1);//<div><span>好好学习</span></div>
    console.log(html2);
    // <div>
    //      <span>好好学习</span>   
    // </div> 
    console.log(html3);
    // <div>
    //      <span>好好学习
    //             <span>1234天天向上</span>
    //         </span>   
    // </div>  


ES6新增数据类型 Symbol:
表示独一无二的值，Symbol最大的用途是用来定义对象的唯一属性名
    let a = Symbol();  
    let b = Symbol();
    console.log(a===b); //false

并不会改变全局变量中的值
    let name = Symbol();
    {
        var person = {};
        person[name] = 'file1';
        console.log(person[name]);//file1
    }
    {
        let name = Symbol();
        person[name] = 'file2';
        console.log(person[name]);//file2
    }
    console.log(person[name]);//file1

Symbol.for()方法:
类似于单例模式，首先在全局中搜索有没有以该参数为名称的Symbol值，如果有则返回该Symbol值，否则新建并返回一个以该参数为名称的Symbol值。
    var symbol1 = Symbol.for('Alice');  
    var symbol2 = Symbol.for('Alice');  
    console.log(symbol1 === symbol2) // 输出：true  


Symbol.keyFor()方法:
返回一个已创建的Symbol类型值的key，实质是检测该Symbol是否已创建。
    var symbol1 = Symbol.for("Alice");  
    console.log(Symbol.keyFor(symbol1)); // 输出："Alice"  
    var symbol2 = Symbol("Alice");  
    console.log(Symbol.keyFor(symbol2)); // 输出：undefined 



ES6中set:
    var arr = new Set([1,2,3,3,4]);
    console.log(arr);//Set(4) {1, 2, 3, 4}
    console.log(arr.size);//4
    arr.add(5);
    console.log(arr);//Set(5) {1, 2, 3, 4, 5}
    arr.delete(2);
    console.log(arr);//Set(4) {1, 3, 4, 5}
    console.log(arr.has(7));//false
    console.log(arr.has(5));//true
    console.log(arr.has(3));//true
    arr.clear();
    console.log(arr);//Set(0){}
