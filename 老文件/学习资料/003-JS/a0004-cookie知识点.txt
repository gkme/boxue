字符串编码函数:
1、escape
2、encodeURI
3、encodeURIComponent
对应的解码函数:
1、unescape
2、decodeURI
3、decodeURIComponent 
预备知识：URI是统一资源标识的意思，通常我们所说的URL只是URI的一种。典型URL的格式如下所示。下面提到的URL编码，实际上应该指的是URI编码。
http://example.com:8042/over/there?name=ferret#nose
这三个编码的函数――escape，encodeURI，encodeURIComponent――都是用于将不安全不合法的Url字符转换为合法的Url字符表示，它们有以下几个不同点。
下面列出了这三个函数的安全字符（即函数不会对这些字符进行编码）
escape（69个）：*/@+-._0-9a-zA-Z
encodeURI（82个）：!#$&'()*+,/:;=?@-._~0-9a-zA-Z
encodeURIComponent（71个）：!'()*-._~0-9a-zA-Z
实例：
url = 'foo://example.com:8042/over/there?name=ferret#nose&sex=女';
    console.log(url);
    console.log('escape-------'+escape(url));
    console.log('encodeURI-------'+encodeURI(url));
    console.log('encodeURIComponent-------'+encodeURIComponent(url));
什么是cookie:
cookie 用来识别用户。
cookie是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求某个页面时，就会发送这个 cookie。你可以使用 JavaScript 来创建和取回 cookie 的值。
有关cookie的例子：
名字 cookie
    当访问者首次访问页面时，他或她也许会填写他/她们的名字。名字会存储于 cookie 中。当访问者再次访问网站时，他们会收到类似 "Welcome John Doe!" 的欢迎词。而名字则是从 cookie 中取回的。
密码 cookie
当访问者首次访问页面时，他或她也许会填写他/她们的密码。密码也可被存储于 cookie 中。当他们再次访问网站时，密码就会从 cookie 中取回。
日期 cookie
    当访问者首次访问页面时，他或她也许会填写他/她们的密码。密码也可被存储于 cookie 中。当他们再次访问网站时，密码就会从 cookie 中取回。
日期 cookie
    当访问者首次访问你的网站时，当前的日期可存储于 cookie 中。当他们再次访问网站时，他们会收到类似这样的一条消息："Your last visit was on Tuesday August 11, 2005!"。日期也是从 cookie 中取回的。
设置cookie 
document.cookie = “user=Rose”;
document.cookie = “pw=123”;
document.cookie =  “user=”+ escape('张三');
在cookie的名或值中不能使用分号（;）、逗号（,）、等号（=）以及空格。在cookie的名中做到这点很容易，但要保存的值是不确定的。如何来存储这些值呢？方法是用escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储于cookie值中，而且使用此种方案还可以避免中文乱码的出现。
toGMTString() 方法可根据格林威治时间 (GMT) 把 Date 对象转换为字符串，并返回结果

获取cookie
//设置两个cookie
    document.cookie="userId=828";
    document.cookie="userName=hulk";
    //获取cookie字符串
    var strCookie=document.cookie;
    //将多cookie切割为多个名/值对
    var arrCookie=strCookie.split("; ");
    var userId;
    //遍历cookie数组，处理每个cookie对
    for(var i=0;i<arrCookie.length;i++){
        var arr=arrCookie[i].split("=");
        //找到名称为userId的cookie，并返回它的值
        if("userId"==arr[0]){
            userId=arr[1];
            break;
        }
    }
    alert(userId);

给cookie设置终止日期
会话cookie和持久cookie的区别 
如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。这种生命期为浏览会话期的cookie被称为会话cookie。会话cookie一般不保存在硬盘上而是保存在内存里。 
如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。 
 //获取当前时间
var date=new Date();
var expireDays=10;
//将date设置为10天以后的时间
date.setTime(date.getTime()+expireDays*24*3600*1000);
//或者也可以用?
date.setDate(date.getDate+expireDays)
//将userId设置为10天后过期
document.cookie="userId=828;  expires="+date.toGMTString();

删除cookie
//获取当前时间
var date=new Date();
//将date设置为过去的时间

date.setTime(date.getTime()-10000);
//将userId这个cookie删除

document.cookie="userId=828;expires="+date.toGMTString();

指定可访问cookie的路径
document.cookie="userId=320; path=/shop";
就表示当前cookie仅能在shop目录下使用。
如果要使cookie在整个网站下可用，可以将cookie_dir指定为根目录，例如：
document.cookie="userId=320; path=/";

指定可访问cookie的主机名
默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制，其语法格式为：
document.cookie="name=value; domain=cookieDomain";
以google为例，要实现跨主机访问，可以写为：
document.cookie="name=value;domain=.google.com";
这样，所有google.com下的主机都可以访问该cookie。

Cookie注意事项：
1、浏览器端、服务器端都可以写入cookie
2、服务器端写入（了解）：浏览器向服务器发送请求时，服务器会将少量的数据返回给浏览器（该数据以set-cookie消息头的形式返回给浏览器）
，浏览器会将这些数据存放到硬盘或者内存上。当浏览器下次再次访问服务器时，会将之前存放的数据发送给服务器（以cookie消息头的形式发送给服务器）。通过这种方式，就可以记录浏览器与服务器之间交互的数据，也就是状态。

3、不同终端的cookie信息在任何情况下都不能共享
同一终端的不同浏览器的cookie信息不能共享
cookie跟域有关，当前页面只能访问存储在当前域名和父级域名(cookie的域前面有“.”的)下的cookie 