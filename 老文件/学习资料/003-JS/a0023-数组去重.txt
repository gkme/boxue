1.利用ES6 Set去重（ES6中最常用）
function unique(arr){
    return Array.from(new Set(arr));
}
var arr = [1,2,3,4,5,1,2,3,1];
console.log(unique(arr));//[1, 2, 3, 4, 5]
注：这种方法还无法去掉“{}”空对象

2.利用for嵌套for，然后splice去重（ES5中最常用）
function unique(arr){
    for(var i=0;i<arr.length;i++){
        for(var j=i+1;j<arr.length;j++){
            if(arr[i]==arr[j]){
                arr.splice(j,1);
                j--;
            }
        }
    }
    return arr;
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", 15, 8]

3.利用indexOf去重
function unique(arr){
    if(!Array.isArray(arr)){
        console.log('type error!');
        return
    }
    var array = [];
    for(var i=0;i<arr.length;i++){
        if(array.indexOf(arr[i]) === -1){
            array.push(arr[i]);
        }
    }
    return array;
}
var arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));// [1, "true", true, 15, 8]
注：NaN、{}没有去重

4.利用sort排序
function unique(arr){
    if(!Array.isArray(arr)){
        console.log('type error!');
        return
    }
    arr = arr.sort();
    var array = [arr[0]];
    for(var i=1;i<arr.length;i++){
        if(arr[i] !== arr[i-1]){
            array.push(arr[i]);
        }
    }
    return array;
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", 15, 8]

5.利用对象的属性不能相同的特点进行去重
function unique(arr){
    if(!Array.isArray(arr)){
        console.log('type error!');
        return
    }
    var obj = {};
    var array = [];
    for(var i=1;i<arr.length;i++){
        if(!obj[arr[i]]){
            array.push(arr[i])
            obj[arr[i]] = 1
        }else{
            obj[arr[i]]++
        }
    }
    return array;
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", 15, 8]

6.利用includes
function unique(arr){
    if(!Array.isArray(arr)){
        console.log('type error!');
        return
    }
    var array = [];
    for(var i=1;i<arr.length;i++){
        if(!array.includes(arr[i])){
            array.push(arr[i])
        }
    }
    return array;
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", true, 15, 8]

7.利用hasOwnProperty
function unique(arr){
    var obj = {};
    return arr.filter(function(item,index,arr){
        return obj.hasOwnProperty(typeof item +item)?false:(obj[typeof item+item] = true)
    })
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", true, 15, 8]

8.利用filter
function unique(arr){
    return arr.filter(function(item,index,arr){
        return arr.indexOf(item,0) === index;
    })
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", true, 15, 8]

9.利用递归去重
function unique(arr){
    var array = arr;
    var len = array.length;
    array.sort(function(a,b){
        return a-b;
    })
    function loop(index){
        if(index >= 1){
            if(array[index] === array[index-1]){
                array.splice(index,1);
            }
            loop(index-1);
        }
    }
    loop(len-1);
    return array;
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", true, 15, 8]

10.利用Map数据结构去重
function unique(arr){
    let map = new Map();
    let array = new Array();
    for(let i=0;i<arr.length;i++){
        if(map.has(arr[i])){
            map.set(arr[i],true)
        }else{
            map.set(arr[i],false)
            array.push(arr[i])
        }
    } 
    return array;
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", true, 15, 8]

11.利用reduce+includes
function unique(arr){
    return arr.reduce((prev,cur)=>prev.includes(cur)?prev:[...prev,cur],[])
}
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log(unique(arr));//[1, "true", true, 15, 8]

12.[...new Set(arr)]
var  arr = [1,1,"true","true",true,true,15,15,8];
console.log([...new Set(arr)]);//[1, "true", true, 15, 8]
注：相对于第一种方法来说只是简化了代码