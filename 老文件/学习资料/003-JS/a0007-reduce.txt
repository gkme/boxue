//reduce 收敛 4个参数,返回叠加后的数组，不改变原数组
[1,2,3,4,5].reduce(function(prev,next,index,item){
    console.log(prev,next);
    return 100;//本次的返回值 会做为下一次的返回值
})

var sum = [{price:30,count:2},{price:30,count:3},{price:30,count:5}].reduce(function(prev,next){
    return prev + next.price*next.count;
},0)//0做为默认上一项prev
console.log(sum);//300 

var arr = [[1,2,3],[4,5,6],[7,8,9]].reduce(function(prev,next,index,item){
    return prev.concat(next);
})
console.log(arr);//[1,2,3,4,5,6,7,8,9]




计算数组元素相加后的总和：
var numbers = [65, 44, 12, 4];
function getSum(total, num) {
    return total + num;
}
function myFunction(item) {
    document.getElementById("demo").innerHTML = numbers.reduce(getSum);
}



四舍五入后计算数组元素的总和：
var numbers = [15.5, 2.3, 1.1, 4.7];
function getSum(total, num) {
    return total + Math.round(num);
}
function myFunction(item) {
    document.getElementById("demo").innerHTML = numbers.reduce(getSum, 0);
}



