例1：
var name="小王",age=17;
var obj={
    name:"小张",
    objAge:this.age,
    myFun:function(){
        console.log(this.name+"年龄"+this.age);
    }
}
console.log(obj.objAge);//17

例2：
var fav="小李";
function shows(){
    console.log(this.fav);//小李
}
shows();



比较一下这两者this的差别，第一个但因里面的this指向obj,第二个全局声明的shows()函数this是window;
1，call()、apply()、bind() 都是用来重定义 this 这个对象的！
如：
var name="小王",age=17;
var obj={
    name:"小张",
    objAge:this.age,
    myFun:function(){
        console.log(this.name+"年龄"+this.age);
    }
}
var db={
    name:"小赵",
    age:99
}
obj.myFun.call(db);//小赵年龄99
obj.myFun.bind(db)();//小赵年龄99
以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！
由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。

2.对比call 、bind 、 apply 传参情况下
var name="小王",age=17;
var obj={
    name:"小张",
    objAge:this.age,
    myFun:function(fm,t){
        console.log(this.name+"年龄"+this.age,"来自"+fm+"去"+t);
    }
}
var db={
    name:"小赵",
    age:99
}
obj.myFun.call(db,"上海","成都");//小赵年龄99 来自上海去成都
obj.myFun.apply(db,["上海","成都"]);//小赵年龄99 来自上海去成都
obj.myFun.bind(db,"上海","成都")();//小赵年龄99 来自上海去成都
obj.myFun.bind(db,["上海","成都"])();//小赵年龄99 来自上海,成都去undefined

微妙的差距！
从上面四个结果不难看出:
call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：
call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。
apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。
bind 除了返回是函数以外，它 的参数和 call 一样。
当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！
